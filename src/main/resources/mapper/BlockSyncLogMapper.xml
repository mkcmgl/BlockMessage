<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.inspur.ethereumtest.mapper.BlockSyncLogMapper">
    <insert id="insert">
        insert into block (id, result)
        values (#{id,jdbcType=VARCHAR}, #{result,jdbcType=VARCHAR})
    </insert>

    <insert id="insertByNumber">
        insert into blockbynumber (height, `timestamp`, miner, uncles, difficulty,
                                   totalDifficulty, `size`, gasUsed, gasLimit, extraData, `hash`, parentHash,
                                   sha3Uncles, stateRoot, nonce, `number`, transactionsRoot)
        values (#{height,jdbcType=VARCHAR}, #{timestamp,jdbcType=VARCHAR},
                #{miner,jdbcType=VARCHAR}, #{uncles,jdbcType=VARCHAR},
                #{difficulty,jdbcType=VARCHAR}, #{totalDifficulty,jdbcType=VARCHAR},
                #{size,jdbcType=VARCHAR}, #{gasUsed,jdbcType=VARCHAR}, #{gasLimit,jdbcType=VARCHAR},
                #{extraData,jdbcType=VARCHAR}, #{hash,jdbcType=VARCHAR}, #{parentHash,jdbcType=VARCHAR},
                #{sha3Uncles,jdbcType=VARCHAR}, #{stateRoot,jdbcType=VARCHAR},
                #{nonce,jdbcType=VARCHAR}, #{number,jdbcType=VARCHAR},
                #{transactionsRoot,jdbcType=VARCHAR})
    </insert>

    <insert id="insertByHash">
        insert into blockbyhash (id, difficulty, extraData, gasLimit, gasUsed,
                                 hash, miner, nonce, `number`, parentHash, sha3Uncles, `size`, stateRoot, `timestamp`,
                                 totalDifficulty, transactionsRoot)
        values (#{id,jdbcType=VARCHAR}, #{difficulty,jdbcType=VARCHAR},
                #{extraData,jdbcType=VARCHAR}, #{gasLimit,jdbcType=VARCHAR},
                #{gasUsed,jdbcType=VARCHAR}, #{hash,jdbcType=VARCHAR},
                #{miner,jdbcType=VARCHAR}, #{nonce,jdbcType=VARCHAR},
                #{number,jdbcType=VARCHAR}, #{parentHash,jdbcType=VARCHAR},
                #{sha3Uncles,jdbcType=VARCHAR}, #{size,jdbcType=VARCHAR},
                #{stateRoot,jdbcType=VARCHAR}, #{timestamp,jdbcType=VARCHAR},
                #{totalDifficulty,jdbcType=VARCHAR},
                #{transactionsRoot,jdbcType=VARCHAR})
    </insert>
    <select id="getMaxId" resultType="java.lang.String">
        SELECT *
        from block
        where id = (SELECT max(id) FROM block ORDER BY id ASC)
        ORDER BY id ASC;

    </select>
    <select id="findAll" resultType="com.inspur.ethereumtest.pojo.Blockbynumber">
        SELECT *from blockbynumber

    </select>


    <resultMap id="BaseResultMap" type="com.inspur.ethereumtest.pojo.Blocktest">
        <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="result" property="result" jdbcType="VARCHAR"/>

    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <!--<sql id="Base_Column_List">-->
    <!--id,result-->
    <!--</sql>-->


    <!--<select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.String">-->
    <!--select-->
    <!--<include refid="Base_Column_List"/>-->
    <!--from block-->
    <!--where id = #{id,jdbcType=VARCHAR}-->
    <!--</select>-->

</mapper>